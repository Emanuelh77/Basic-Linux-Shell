nclude <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>


#define MAXLINE 256


int main(void){
    char    buf[MAXLINE];
    char    cmd[MAXLINE];
    char*   args[2048];
    pid_t   pid;
    int     status;

    printf("\% ");
    while (fgets(buf, MAXLINE, stdin) != NULL) {
        buf[strlen(buf) - 1] = '\0';
        strncpy(cmd,buf,MAXLINE);
        args[0] = cmd;
        int i=0;
        // loop through the string marking each argument
        while(cmd[i]!=' ' && cmd[i]!='\0' && i<MAXLINE){
          i++;
        }
        // the first delimiter is special
        // if we hit a space then the first argument
        // starts on the next space
        if(cmd[i] == ' '){
          args[1] = &buf[i+1];
        // if we stopped for any other reason we
        // are done parsing arguments
        }else{
          args[1] = NULL;
        }
        // either way the command is done
        cmd[i] = '\0';
        i++;
        int j=2;
        while(buf[i]!='\0' && i
          if(buf[i] == ' '){
            buf[i] = '\0';
            args[j] = &buf[i+1];
            j++;
          }
          i++;
        }
        args[j] = NULL;

       // if fork returns a negative value, there was a failure
        if ( (pid = fork()) < 0){
            fprintf(stderr,"fork error");
        // the child should get a pid of 0
        } else if (pid == 0) {
            execvp(cmd, args);
            fprintf(stderr,"couldn't execute: %s", buf);
            // the return value indicates that there was a problem
            return 1;
        }
        // the parent should wait for the child to finish
        if ( (pid = waitpid(pid, &status, 0)) < 0){
            // in the case of an error - exit the shell?
            fprintf(stderr,"waitpid error");
        }        printf("%% ");
    }    return 0;
}
